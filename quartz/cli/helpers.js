import{isCancel as r,outro as e}from"@clack/prompts";import t from"chalk";import{contentCacheFolder as i}from"./constants.js";import{spawnSync as s}from"child_process";import o from"fs";export function escapePath(r){return r.replace(/\\ /g," ").replace(/^".*"$/,"$1").replace(/^'.*"$/,"$1").trim()}export function exitIfCancel(i){if(!r(i))return i;e(t.red("Exiting")),process.exit(0)}export async function stashContentFolder(r){await o.promises.rm(i,{force:!0,recursive:!0}),await o.promises.cp(r,i,{force:!0,recursive:!0,verbatimSymlinks:!0,preserveTimestamps:!0}),await o.promises.rm(r,{force:!0,recursive:!0})}export function gitPull(r,e){let i=s("git",["pull","--no-rebase","--autostash","-s","recursive","-X","ours","--no-edit",r,e],{stdio:"inherit"});if(i.stderr)throw Error(t.red(`Error while pulling updates: ${i.stderr}`));if(0!==i.status)throw Error(t.red("Error while pulling updates"))}export async function popContentFolder(r){await o.promises.rm(r,{force:!0,recursive:!0}),await o.promises.cp(i,r,{force:!0,recursive:!0,verbatimSymlinks:!0,preserveTimestamps:!0}),await o.promises.rm(i,{force:!0,recursive:!0})}