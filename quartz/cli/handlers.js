import{promises as e}from"fs";import t from"path";import i from"esbuild";import o from"chalk";import{sassPlugin as r}from"esbuild-sass-plugin";import a from"fs";import{intro as n,outro as s,select as l,text as u}from"@clack/prompts";import{rimraf as c}from"rimraf";import p from"chokidar";import m from"pretty-bytes";import{execSync as d,spawnSync as g}from"child_process";import y from"http";import h from"serve-handler";import{WebSocketServer as f}from"ws";import{randomUUID as w}from"crypto";import{Mutex as b}from"async-mutex";import{CreateArgv as x}from"./args.js";import{exitIfCancel as k,escapePath as v,gitPull as $,popContentFolder as z,stashContentFolder as S}from"./helpers.js";import{UPSTREAM_NAME as j,QUARTZ_SOURCE_BRANCH as D,ORIGIN_NAME as Q,version as q,fp as C,cacheFile as L,cwd as T}from"./constants.js";export async function handleCreate(e){console.log(),n(o.bgGreen.black(` Quartz v${q} `));let i=t.join(T,e.directory),r=e.strategy?.toLowerCase(),p=e.links?.toLowerCase(),m=e.source;async function g(){let e=await a.promises.lstat(i);e.isSymbolicLink()?await a.promises.unlink(i):await c(i)}r&&p&&"new"!==r&&(m?a.existsSync(m)?a.lstatSync(m).isDirectory()||(s(o.red(`Source directory to copy/symlink 'content' from is not a directory (found file at '${o.yellow(m)}', invalid argument ${o.yellow(`-${x.source.alias[0]}`)}")`)),process.exit(1)):(s(o.red(`Input directory to copy/symlink 'content' from not found ('${o.yellow(m)}', invalid argument "${o.yellow(`-${x.source.alias[0]}`)})`)),process.exit(1)):(s(o.red(`Setup strategies (arg '${o.yellow(`-${x.strategy.alias[0]}`)}') other than '${o.yellow("new")}' require content folder argument ('${o.yellow(`-${x.source.alias[0]}`)}') to be set`)),process.exit(1))),r||(r=k(await l({message:`Choose how to initialize the content in \`${i}\``,options:[{value:"new",label:"Empty Quartz"},{value:"copy",label:"Copy an existing folder",hint:"overwrites `content`"},{value:"symlink",label:"Symlink an existing folder",hint:"don't select this unless you know what you are doing!"},]})));let y=t.join(i,".gitkeep");if(a.existsSync(y)&&await a.promises.unlink(y),"copy"===r||"symlink"===r){let h=m;m||(h=v(k(await u({message:"Enter the full path to existing content folder",placeholder:"On most terminal emulators, you can drag and drop a folder into the window and it will paste the full path",validate(e){let t=v(e);return a.existsSync(t)?a.lstatSync(t).isDirectory()?void 0:"The given path is not a folder":"The given path doesn't exist"}})))),await g(),"copy"===r?await a.promises.cp(h,i,{recursive:!0,preserveTimestamps:!0}):"symlink"===r&&await a.promises.symlink(h,i,"dir")}else"new"===r&&await a.promises.writeFile(t.join(i,"index.md"),`---
title: Welcome to Quartz
---

This is a blank Quartz installation.
See the [documentation](https://quartz.jzhao.xyz) for how to get started.
`);p||(p=k(await l({message:"Choose how Quartz should resolve links in your content. This should match Obsidian's link format. You can change this later in `quartz.config.ts`.",options:[{value:"shortest",label:"Treat links as shortest path",hint:"(default)"},{value:"absolute",label:"Treat links as absolute path"},{value:"relative",label:"Treat links as relative paths"},]})));let f=t.join(T,"quartz.config.ts"),w=await a.promises.readFile(f,{encoding:"utf-8"});await a.promises.writeFile(f,w=w.replace(/markdownLinkResolution: '(.+)'/,`markdownLinkResolution: '${p}'`)),d("git remote show upstream || git remote add upstream https://github.com/jackyzha0/quartz.git",{stdio:"ignore"}),s(`You're all set! Not sure what to do next? Try:
  • Customizing Quartz a bit more by editing \`quartz.config.ts\`
  • Running \`npx quartz build --serve\` to preview your Quartz locally
  • Hosting your Quartz online (see: https://quartz.jzhao.xyz/hosting)
`)}export async function handleBuild(n){console.log(o.bgGreen.black(`
 Quartz v${q} 
`));let s=await i.context({entryPoints:[C],outfile:L,bundle:!0,keepNames:!0,minifyWhitespace:!0,minifySyntax:!0,platform:"node",format:"esm",jsx:"automatic",jsxImportSource:"preact",packages:"external",metafile:!0,sourcemap:!0,sourcesContent:!1,plugins:[r({type:"css-text",cssImports:!0}),{name:"inline-script-loader",setup(o){o.onLoad({filter:/\.inline\.(ts|js)$/},async o=>{let r=await e.readFile(o.path,"utf8");r=(r=r.replace("export default","")).replace("export","");let a=t.relative(t.resolve("."),o.path),n=t.dirname(a),s=await i.build({stdin:{contents:r,loader:"ts",resolveDir:n,sourcefile:a},write:!1,bundle:!0,minify:!0,platform:"browser",format:"esm"}),l=s.outputFiles[0].text;return{contents:l,loader:"text"}})}},]}),l=new b,u=0,c=null,d=async e=>{let t=new Date().getTime();u=t;let r=await l.acquire();if(u>t){r();return}c&&(await c(),console.log(o.yellow("Detected a source code change, doing a hard rebuild...")));let a=await s.rebuild().catch(e=>{console.error(`${o.red("Couldn't parse Quartz configuration:")} ${C}`),console.log(`Reason: ${o.grey(e)}`),process.exit(1)});if(r(),n.bundleInfo){let p=a.metafile.outputs["quartz/.quartz-cache/transpiled-build.mjs"];console.log(`Successfully transpiled ${Object.keys(p.inputs).length} files (${m(p.bytes)})`),console.log(await i.analyzeMetafile(a.metafile,{color:!0}))}let{default:d}=await import(`../../${L}?update=${w()}`);c=await d(n,l,e),e()};if(n.serve){let g=[],x=()=>g.forEach(e=>e.send("rebuild"));""===n.baseDir||n.baseDir.startsWith("/")||(n.baseDir="/"+n.baseDir),await d(x);let k=y.createServer(async(e,i)=>{if(n.baseDir&&!e.url?.startsWith(n.baseDir)){console.log(o.red(`[404] ${e.url} (warning: link outside of site, this is likely a Quartz bug)`)),i.writeHead(404),i.end();return}e.url=e.url?.slice(n.baseDir.length);let r=async()=>{let t=await l.acquire();await h(e,i,{public:n.output,directoryListing:!1,headers:[{source:"**/*.*",headers:[{key:"Content-Disposition",value:"inline"}]},]});let r=i.statusCode,a=r>=200&&r<300?o.green(`[${r}]`):o.red(`[${r}]`);console.log(a+o.grey(` ${n.baseDir}${e.url}`)),t()},s=t=>{t=n.baseDir+t,i.writeHead(302,{Location:t}),console.log(o.yellow("[302]")+o.grey(` ${n.baseDir}${e.url} -> ${t}`)),i.end()},u=e.url?.split("?")[0]??"/";if(u.endsWith("/")){let c=t.posix.join(u,"index.html");if(a.existsSync(t.posix.join(n.output,c)))return e.url=u,r();let p=u.slice(0,-1);if(""===t.extname(p)&&(p+=".html"),a.existsSync(t.posix.join(n.output,p)))return s(u.slice(0,-1))}else{let m=u;if(""===t.extname(m)&&(m+=".html"),a.existsSync(t.posix.join(n.output,m)))return e.url=u,r();let d=t.posix.join(u,"index.html");if(a.existsSync(t.posix.join(n.output,d)))return s(u+"/")}return r()});k.listen(n.port);let v=new f({port:n.wsPort});v.on("connection",e=>g.push(e)),console.log(o.cyan(`Started a Quartz server listening at http://localhost:${n.port}${n.baseDir}`)),console.log("hint: exit with ctrl+c"),p.watch(["**/*.ts","**/*.tsx","**/*.scss","package.json"],{ignoreInitial:!0}).on("all",async()=>{d(x)})}else await d(()=>{}),s.dispose()}export async function handleUpdate(e){let i=t.join(T,e.directory);console.log(o.bgGreen.black(`
 Quartz v${q} 
`)),console.log("Backing up your content"),d("git remote show upstream || git remote add upstream https://github.com/jackyzha0/quartz.git"),await S(i),console.log("Pulling updates... you may need to resolve some `git` conflicts if you've made changes to components or plugins.");try{$(j,D)}catch{console.log(o.red("An error occurred above while pulling updates.")),await z(i);return}await z(i),console.log("Ensuring dependencies are up to date");let r=g("npm",["i"],{stdio:"inherit"});0===r.status?console.log(o.green("Done!")):console.log(o.red("An error occurred above while installing dependencies."))}export async function handleRestore(e){let i=t.join(T,e.directory);await z(i)}export async function handleSync(e){let i=t.join(T,e.directory);if(console.log(o.bgGreen.black(`
 Quartz v${q} 
`)),console.log("Backing up your content"),e.commit){let r=await a.promises.lstat(i);if(r.isSymbolicLink()){let n=await a.promises.readlink(i);console.log(o.yellow("Detected symlink, trying to dereference before committing")),await S(i),await a.promises.cp(n,i,{recursive:!0,preserveTimestamps:!0})}let s=new Date().toLocaleString("en-US",{dateStyle:"medium",timeStyle:"short"}),l=e.message??`Quartz sync: ${s}`;g("git",["add","."],{stdio:"inherit"}),g("git",["commit","-m",l],{stdio:"inherit"}),r.isSymbolicLink()&&await z(i)}if(await S(i),e.pull){console.log("Pulling updates from your repository. You may need to resolve some `git` conflicts if you've made changes to components or plugins.");try{$(Q,D)}catch{console.log(o.red("An error occurred above while pulling updates.")),await z(i);return}}if(await z(i),e.push){console.log("Pushing your changes");let u=g("git",["push","-uf",Q,D],{stdio:"inherit"});if(0!==u.status){console.log(o.red(`An error occurred above while pushing to remote ${Q}.`));return}}console.log(o.green("Done!"))}